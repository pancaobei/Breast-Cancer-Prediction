MC_0.2 <- 1-accuracy_0.2
sprintf("Mis-classification error is %s",MC_0.2)
sensitivity0.2 <- round(308/(308+117),2)
specificity0.2 <- round(2065/(2065+327),2)
sprintf("Sensitivity at 0.2 threshold: %s", sensitivity0.2)
sprintf("Specificity at 0.2 threshold: %s", specificity0.2)
# Tạo đường cong ROC
ROCRpred = prediction(PredictTrain, train_data$Status) # chuẩn bị dữ liệu để tính hiệu suất và vẽ ROC curve.
ROCRperf = performance(ROCRpred, "tpr", "fpr") # chỉ định "tpr" và "fpr" tính True Positive Rate (tpr) và False Positive Rate (fpr) để vẽ ROC curve
# Thêm nhãn ngưỡng
plot(ROCRperf, colorize=TRUE, print.cutoffs.at = seq(0,1,0.1), text.adj = c(-0.2, 1.7))
abline(a=0, b=1) # vẽ đường thẳng từ gốc tọa độ (a = 0) với độ dốc 45 độ (b = 1)
# tính giá trị AUC (Area Under the Curve) của mô hình dựa trên dữ liệu Train, sau đó thêm nó vào đồ thị ROC curve.
auc_train <- round(as.numeric(performance(ROCRpred, "auc")@y.values),2)
legend(.8, .2, auc_train, title = "AUC", cex=1)
# Đưa ra dự đoán trên tập kiểm tra
PredictTest <- predict(model, type = "response", newdata = test_data) # sử dụng mô hình model để dự đoán kết quả trên tập dữ liệu kiểm tra (test).
# Chuyển đổi xác suất thành giá trị
## Dựa vào đường cong ROC ở trên, chọn ngưỡng t = 0,5
test_tab <- table(test_data$Status, PredictTest > 0.5)
test_tab
accuracy_test <- round(sum(diag(test_tab))/sum(test_tab),2)
sprintf("Accuracy on test set is %s", accuracy_test)
ROCRPredTest = prediction(PredictTest, test_data$Status)
auc = round(as.numeric(performance(ROCRPredTest, "auc")@y.values),2)
auc
# Tạo tập dữ liệu huấn luyện và tập dữ liệu kiểm tra
create_train_test <- function(data, size = 0.8, train = TRUE) {
n_row <- nrow(data)
total_row <- size * n_row
train_sample <- sample(1:n_row, size = total_row, replace = FALSE)
if (train == TRUE) {
return(data[train_sample, ])
} else {
return(data[-train_sample, ])
}
}
#lấy các thuộc tính cần thiết
selected_data <- data[, c("Age", "Estrogen.Status", "X6th.Stage","Survival.Months","Status")]
#Sử dụng hàm để tạo các tập train và test
data_train <- create_train_test(selected_data, 0.8, train = TRUE)
data_test <- create_train_test(selected_data, 0.8, train = FALSE)
datatable(data_train,filter = 'top', options = list(pageLength = 5, autoWidth = TRUE))
datatable(data_test,filter = 'top', options = list(pageLength = 5, autoWidth = TRUE))
#Xây dựng mô hình cây quyết định với "Status" là biến target variable
model <- rpart(Status~ ., data = data_train, method = "class")
#Vẽ cây quyết định
rpart.plot(model,extra = 106)
#Tiến hành dự đoạn trên tập test
predictions <- predict(model, data_test, type ="class")
#Tạo 1 bảng confusion
table_mat <- table(data_test$Status, predictions)
table_mat
#Tính độ chính xác
accuracy <- sum(data_test$Status == predictions) / nrow(data_test)
print(paste("Accuracy:", accuracy))
data <- read.csv("./Data/2_ Breast_Cancer.csv")
datatable(data,filter = 'top', options = list(pageLength = 5, autoWidth = TRUE))
datatable(summary(data), options = list(pageLength = 5, autoWidth = TRUE))
data_copy<-data
if(length(data_copy[is.na(data_copy)])==0){
print("Không tồn tại gái trị na")
}else{
print("Tồn tại gái trị na")
}
data_copy<-data_copy[,-c(1)]
datatable(data_copy,filter = 'top', options = list(pageLength = 5, autoWidth = TRUE))
query <- paste("update data_copy set diagnosis=1 where diagnosis='M'")
data_copy <- sqldf(c(query, "select * from data_copy"))
query <- paste("update data_copy set diagnosis=0 where diagnosis='B'")
data_copy <- sqldf(c(query, "select * from data_copy"))
data_copy["diagnosis"]<-list(as.numeric(unlist(data_copy["diagnosis"])))
datatable(data_copy,filter = 'top', options = list(pageLength = 5, autoWidth = TRUE))
M_B_tg<-data.frame(c(sqldf("select `diagnosis`,count(*) as sl from data group by `diagnosis`")))
ggplot(data=M_B_tg, aes(x=diagnosis, y=sl)) + geom_bar(stat="identity",color="steelblue",fill="steelblue")+ ggtitle("M_B")
corr <- round(cor(data_copy), 1)
ggcorrplot(corr,outline.color = "black")
set.seed(123)
samp <- sample(nrow(data_copy), 0.7 * nrow(data_copy))
train <- data_copy[samp, ]
test <- data_copy[-samp, ]
# Check Something
ames_dt1 <- randomForest(diagnosis ~ `radius_mean`+`perimeter_mean`+`area_mean`+`concavity_mean`+`concave.points_mean`+ `fractal_dimension_se`+`texture_worst`+`perimeter_worst`+ `concavity_worst`,data = train,ntree = 800
)
ames_dt1
plot(ames_dt1)
y_pred <- predict(ames_dt1, newdata = test)
head(y_pred)
plot(y_pred,col = "blue")
abline(h = 0.5, col = "darkgreen")
y_pred<-round(y_pred)
head(y_pred)
plot(y_pred,col = "blue")
abline(h = 0.5, col = "darkgreen")
table(test$diagnosis,y_pred)
sensitivity(factor(test$diagnosis),factor(y_pred))
specificity(factor(test$diagnosis),factor(y_pred))
sum(test$diagnosis - y_pred)/length(test)
sum(abs(test$diagnosis - y_pred))/length(test)
png(file="./Image/saving_plot2.png",
width=4000, height=900)
reprtree:::plot.getTree(ames_dt1,depth = "d10")
dev.off()
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(ggplot2)
library(knitr)
library(tidyverse)
library(sqldf)
library(ggcorrplot)
library(rpart)       # direct engine for decision tree application
library(caret)       # meta engine for decision tree application
library(rpart.plot)
#install.packages('devtools', repos = 'http://cran.us.r-project.org')
#library(devtools)
#devtools::install_github('skinner927/reprtree')
library(reprtree)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(ggplot2)
library(knitr)
library(tidyverse)
library(sqldf)
library(ggcorrplot)
library(rpart)       # direct engine for decision tree application
library(caret)       # meta engine for decision tree application
library(rpart.plot)
#install.packages('devtools', repos = 'http://cran.us.r-project.org')
#library(devtools)
#devtools::install_github('skinner927/reprtree')
library(reprtree)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(ggplot2)
library(knitr)
library(tidyverse)
library(sqldf)
library(ggcorrplot)
library(rpart)       # direct engine for decision tree application
library(caret)       # meta engine for decision tree application
library(rpart.plot)
install.packages('devtools', repos = 'http://cran.us.r-project.org')
library(devtools)
devtools::install_github('skinner927/reprtree')
library(reprtree)
library(DT)
library(glmnet)
library(nnet)
library(caTools)
library(randomForest)
library(ROCR)
library(pROC)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(ggplot2)
library(knitr)
library(tidyverse)
library(sqldf)
library(ggcorrplot)
library(rpart)       # direct engine for decision tree application
library(caret)       # meta engine for decision tree application
library(rpart.plot)
install.packages('devtools', repos = 'http://cran.us.r-project.org')
library(devtools)
devtools::install_github('skinner927/reprtree')
library(reprtree)
library(DT)
library(glmnet)
library(nnet)
library(caTools)
library(randomForest)
library(ROCR)
library(pROC)
data <- read.csv("./Data/1_Breast_Cancer.csv")
datatable(data,filter = 'top', options = list(pageLength = 5, autoWidth = TRUE))
datatable(summary(data), options = list(pageLength = 5, autoWidth = TRUE))
data_temp<-data
df <- data
if(length(data[is.na(data)])==0){
print("Không tồn tại gía trị na")
}else{
print("Tồn tại giá trị na")
}
Race_t<-c(sqldf("select distinct Race from data"))
Marital_Status_t<-c(sqldf("select distinct `Marital.Status` from data"))
T_Stage_t<-c(sqldf("select distinct `T.Stage` from data"))
N_Stage_t<-c(sqldf("select distinct `N.Stage` from data"))
X6th_Stage_t<-c(sqldf("select distinct `X6th.Stage` from data"))
differentiate_t<-c(sqldf("select distinct differentiate from data"))
Grade_t<-c(sqldf("select distinct Grade from data"))
A_Stage_t<-c(sqldf("select distinct `A.Stage` from data"))
Estrogen_Status_t<-c(sqldf("select distinct `Estrogen.Status` from data"))
Progesterone_Status_t<-c(sqldf("select distinct `Progesterone.Status` from data"))
Status_t<-c(sqldf("select distinct Status from data"))
list_data<- list(Race_t,Marital_Status_t,T_Stage_t,N_Stage_t,X6th_Stage_t,differentiate_t,Grade_t,A_Stage_t,Estrogen_Status_t,Progesterone_Status_t,Status_t)
for(i in 1:length(list_data)){
print(list_data[[i]])
}
data_copy <- data
AnhXa<-function (object,dk=""){
name_c<-names(object)
object_sp <- str_split(object[[1]]," ")
for(i in 1:length(object_sp)){
if(length(object_sp[[i]])>1){
object_sp[i]<-str_remove(object_sp[[i]],"\" ")
object_sp[i]<-paste(object_sp[i],"")
}
object_sp[i]<-paste(object_sp[i],dk,sep='')
}
len <- length(object_sp)
print(paste("Cập nhật giá trị cột",name_c))
print(object[[1]])
print("Các giá trị tương ứng")
print(1:len)
print("------------------------------------")
#update
for(i in 1:len){
query <- paste("update data_copy set ",paste("`",name_c,"`",sep=''),"=",i,"where ",paste("`",name_c,"`",sep=''),"=",str_replace(paste("'",object_sp[i],"'",sep=''),"\"c",""))
data_copy <- sqldf(c(query, "select * from data_copy"))
}
data_copy
}
for(i in 1:length(list_data)){
if(i!=6){
data_copy<-AnhXa(list_data[[i]])
}else{
data_copy<-AnhXa(list_data[[i]],"differentiated")
}
}
name_c<-colnames(data_copy)
for(i in 1:length(name_c)){
data_copy[name_c[i]]<-list(as.integer(unlist(data_copy[name_c[i]])))
}
datatable(data_copy,filter = 'top', options = list(pageLength = 5, autoWidth = TRUE))
data_temp<-data #Lưu trữ đẻ tránh bị biến đổi
rows_with_null <- data[!complete.cases(data), ]
data_dead <- data[data$Status=='Dead',]
datatable(data_dead,filter = 'top', options = list(pageLength = 5, autoWidth = TRUE))
ggplot(data_dead,aes(x=Marital.Status,y=Survival.Months,fill=Marital.Status))+
geom_boxplot(outlier.colour="red")
ggplot(data_dead,aes(x=Race,y=Survival.Months,fill=Race))+
geom_boxplot(outlier.colour="red")
# Scatter plot giữa Age và Survival.Months
ggplot(df, aes(x = Age, y = Survival.Months, color = Status)) +
geom_point() +
labs(title = "Scatter plot giữa Age và Survival.Months",
x = "Age",
y = "Survival.Months",
color = "Status")
# Scatter plot giữa T.Stage và Survival.Months
ggplot(df, aes(x = T.Stage, y = Survival.Months, color = Status)) +
geom_point(position = position_jitterdodge()) +
labs(title = "Scatter plot giữa T.Stage và Survival.Months",
x = "T.Stage",
y = "Survival.Months",
color = "Status")
# Scatter plot giữa N.Stage và Survival.Months
ggplot(df, aes(x = N.Stage, y = Survival.Months, color = Status)) +
geom_point(position = position_jitterdodge()) +
labs(title = "Scatter plot giữa N.Stage và Survival.Months",
x = "N.Stage",
y = "Survival.Months",
color = "Status")
# Biểu đồ stacked bar chart cho biến T.Stage và Status
ggplot(df, aes(x = T.Stage, fill = Status)) +
geom_bar(position = "fill", color = "white") +
labs(title = "Stacked Bar Chart cho biến T.Stage và Status",
x = "T.Stage",
y = "Tỉ lệ") +
scale_fill_manual(values = c("#66c2a5", "#fc8d62"), name = "Status") +
theme_minimal()
# Biểu đồ stacked bar chart cho biến Age và Status
ggplot(df, aes(x = Age, fill = Status)) +
geom_bar(position = "fill", color = "white") +
labs(title = "Stacked Bar Chart cho biến Age và Status",
x = "Age",
y = "Tỉ lệ") +
scale_fill_manual(values = c("#66c2a5", "#fc8d62"), name = "Status") +
theme_minimal()
ggplot(data, aes(x = X6th.Stage, fill = differentiate)) +
geom_bar(position = "stack") +
labs(title = "Distribution of Differentiate by 6th Stage",
x = "6th Stage", y = "Count") +
theme_minimal()
correlation_matrix <- cor(data[, c("Age", "Tumor.Size", "Regional.Node.Examined")])
heatmap(correlation_matrix,
col = colorRampPalette(c("blue", "black","yellow"))(20),
main = "Correlation Heatmap")
Race_tg<-data.frame(c(sqldf("select `Race`,count(*) as sl from data group by `Race`")))
ggplot(Race_tg, aes(x="", y=Race_tg$sl, fill=Race_tg$Race)) + geom_bar(stat="identity", width=2) + coord_polar("y", start=0) + theme_void() + ggtitle("Race")
Marital_Status_tg<-data.frame(c(sqldf("select `Marital.Status`,count(*) as sl from data group by `Marital.Status`")))
ggplot(Marital_Status_tg, aes(x="", y=Marital_Status_tg$sl, fill=Marital_Status_tg$Marital.Status)) + geom_bar(stat="identity", width=1) + coord_polar("y", start=0) + theme_void() + ggtitle("Marital_Status_tg")
T_Stage_tg<-data.frame(c(sqldf("select `T.Stage`,count(*) as sl from data group by `T.Stage`")))
ggplot(T_Stage_tg, aes(x="", y=T_Stage_tg$sl, fill=T_Stage_tg$T.Stage)) + geom_bar(stat="identity", width=1) + coord_polar("y", start=0) + theme_void() + ggtitle("T_Statge_tg")
N_Stage_tg<-data.frame(c(sqldf("select `N.Stage`,count(*) as sl from data group by `N.Stage`")))
ggplot(N_Stage_tg, aes(x="", y=N_Stage_tg$sl, fill=N_Stage_tg$N.Stage)) + geom_bar(stat="identity", width=1) + coord_polar("y", start=0) + theme_void() + ggtitle("N_Statge_tg")
differentiate_gt<-data.frame(c(sqldf("select `differentiate`,count(*) as sl from data group by `differentiate`")))
ggplot(differentiate_gt, aes(x="", y=differentiate_gt$sl, fill=differentiate_gt$differentiate)) + geom_bar(stat="identity", width=2) + coord_polar("y", start=0) + theme_void() + ggtitle("differentiate")
Grade_tg<-data.frame(c(sqldf("select `Grade`,count(*) as sl from data group by `Grade`")))
ggplot(Grade_tg, aes(x="", y=Grade_tg$sl, fill=Grade_tg$Grade)) + geom_bar(stat="identity", width=1) + coord_polar("y", start=0) + theme_void() + ggtitle("Grade")
A_Stage_tg<-data.frame(c(sqldf("select `A.Stage`,count(*) as sl from data group by `A.Stage`")))
ggplot(A_Stage_tg, aes(x="", y=A_Stage_tg$sl, fill=A_Stage_tg$A.Stage)) + geom_bar(stat="identity", width=1) + coord_polar("y", start=0) + theme_void() + ggtitle("A_Statge_tg")
Estrogen_Status_gt<-data.frame(c(sqldf("select `Estrogen.Status`,count(*) as sl from data group by `Estrogen.Status`")))
ggplot(Estrogen_Status_gt, aes(x="", y=Estrogen_Status_gt$sl, fill=Estrogen_Status_gt$Estrogen.Status)) + geom_bar(stat="identity", width=1) + coord_polar("y", start=0) + theme_void() + ggtitle("Estrogen Status")
Progesterone_Status_gt<-data.frame(c(sqldf("select `Progesterone.Status`,count(*) as sl from data group by `Progesterone.Status`")))
ggplot(Progesterone_Status_gt, aes(x="", y=Progesterone_Status_gt$sl, fill=Progesterone_Status_gt$Progesterone.Status)) + geom_bar(stat="identity", width=1) + coord_polar("y", start=0) + theme_void() + ggtitle("Progesterone Status")
Status_tg<-data.frame(c(sqldf("select `Status`,count(*) as sl from data group by `Status`")))
ggplot(Status_tg, aes(x="", y=Status_tg$sl, fill=Status_tg$Status)) + geom_bar(stat="identity", width=1) + coord_polar("y", start=0) + theme_void() + ggtitle("Status")
# Vẽ biểu đồ ANOVA
ggplot(data, aes(x = Estrogen.Status, y = Tumor.Size, fill= Tumor.Size)) +
geom_bar(stat = "identity") +
labs(title = "Biểu đồ Stacked Bar",
x = "Estrogen.Status",
y = "Tumor.Size",
fill = "Tumor.Size")
# Sử dụng ANOVA
oneway <- aov(Tumor.Size ~ Estrogen.Status,data = data_copy)
summary(oneway)
# Vẽ biểu đồ ANOVA
ggplot(data, aes(x = X6th.Stage, y = Estrogen.Status, fill= Estrogen.Status)) +
geom_bar(stat = "identity") +
labs(title = "Biểu đồ Stacked Bar",
x = "X6th.Stage",
y = "Estrogen.Status",
fill = "Estrogen.Status")
oneway <- aov( X6th.Stage ~ Estrogen.Status, data = data_copy)
summary(oneway)
# Vẽ biểu đồ ANOVA
ggplot(data, aes(x = Survival.Months, y = X6th.Stage, fill= X6th.Stage)) +
geom_bar(stat = "identity") +
labs(title = "Biểu đồ Stacked Bar",
x = "Survival.Months",
y = "X6th.Stage",
fill = "X6th.Stage")
oneway <- aov(Survival.Months ~ X6th.Stage, data = data_copy)
summary(oneway)
# Đọc dữ liệu từ dataframe (hoặc tạo dataframe từ dữ liệu)
df <- read.csv("./Data/1_Breast_Cancer.csv")
str(df)
datatable(df,filter = 'top', options = list(pageLength = 5, autoWidth = TRUE))
summary(df)
table(df$Status)
baseline <- round(3408/nrow(df),2) # tính toán giá trị cơ sở dựa trên số lượng đối tượng xác định là còn sống
baseline
# Đọc dữ liệu từ dataframe (hoặc tạo dataframe từ dữ liệu)
#df <- read.csv("./data/1_Breast_Cancer.csv")
# Chuyển thành factor
df$Race <- as.factor(df$Race)
df$Marital.Status <- as.factor(df$Marital.Status)
df$T.Stage <- as.factor(df$T.Stage)
df$N.Stage <- as.factor(df$N.Stage)
df$differentiate <- as.factor(df$differentiate)
df$Estrogen.Status <- as.factor(df$Estrogen.Status)
df$Progesterone.Status <- as.factor(df$Progesterone.Status)
df$X6th.Stage <- as.factor(df$X6th.Stage)
df$differentiate <- as.factor(df$differentiate)
df$Status <- as.factor(df$Status)
# Chuyển thành số(1 for Dead, 0 for Alive)
df$Status <- ifelse(df$Status == "Dead", 1, 0)
set.seed(123)
splitIndex <- createDataPartition(df$Status, p = 0.75, list = FALSE)
train_data <- df[splitIndex, ]
test_data <- df[-splitIndex, ]
# Fit logistic regression model
model <- glm(Status ~ . -X6th.Stage - Grade , data = train_data, family = "binomial")
# Hiển thị model
summary(model)
PredictTrain <- predict(model, type = "response") # dự đoán xác suất xảy ra sự kiện cho mỗi quan sát trong tập Train
summary(PredictTrain)
hist(PredictTrain, main = "Histogram of Predicted Probabilities", xlab = "Predicted Probabilities")
# tính giá trị trung bình của dự đoán (xác suất dự đoán) dựa trên biến mục tiêu "Status" trong tập dữ liệu "Train"
tapply(PredictTrain, train_data$Status, mean)
threshold_0.7 <- table(train_data$Status, PredictTrain > 0.7)
threshold_0.7
# Độ chính xác
accuracy_0.7 <- round(sum(diag(threshold_0.7))/sum(threshold_0.7),2)
sprintf('Accuracy is %s', accuracy_0.7)
# Tỷ lệ lỗi phân loại sai
MC_0.7 <- 1-accuracy_0.7
sprintf("Mis-classification error is %s",MC_0.7)
sensitivity0.7 <- round(133/(292+133),2)
specificity0.7 <- round(2368/(2368+24),2)
sprintf("Sensitivity at 0.7 threshold: %s", sensitivity0.7)
sprintf("Specificity at 0.7 threshold: %s", specificity0.7)
threshold_0.5 <- table(train_data$Status, PredictTrain > 0.5)
threshold_0.5
# Độ chính xác
accuracy_0.5 <- round(sum(diag(threshold_0.5))/sum(threshold_0.5),2)
sprintf('Accuracy is %s', accuracy_0.5)
# Tỷ lệ lỗi phân loại sai
MC_0.5 <- 1-accuracy_0.5
sprintf("Mis-classification error is %s",MC_0.5)
sensitivity0.5 <- round(197/(228+197),2)
specificity0.5 <- round(2341/(2341+51),2)
sprintf("Sensitivity at 0.5 threshold: %s", sensitivity0.5)
sprintf("Specificity at 0.5 threshold: %s", specificity0.5)
threshold_0.2 <- table(train_data$Status, PredictTrain > 0.2)
threshold_0.2
# Độ chính xác
accuracy_0.2 <- round(sum(diag(threshold_0.2))/sum(threshold_0.2),2)
sprintf('Accuracy is %s', accuracy_0.2)
# Tỷ lệ lỗi phân loại sai
MC_0.2 <- 1-accuracy_0.2
sprintf("Mis-classification error is %s",MC_0.2)
sensitivity0.2 <- round(308/(308+117),2)
specificity0.2 <- round(2065/(2065+327),2)
sprintf("Sensitivity at 0.2 threshold: %s", sensitivity0.2)
sprintf("Specificity at 0.2 threshold: %s", specificity0.2)
# Tạo đường cong ROC
ROCRpred = prediction(PredictTrain, train_data$Status) # chuẩn bị dữ liệu để tính hiệu suất và vẽ ROC curve.
ROCRperf = performance(ROCRpred, "tpr", "fpr") # chỉ định "tpr" và "fpr" tính True Positive Rate (tpr) và False Positive Rate (fpr) để vẽ ROC curve
# Thêm nhãn ngưỡng
plot(ROCRperf, colorize=TRUE, print.cutoffs.at = seq(0,1,0.1), text.adj = c(-0.2, 1.7))
abline(a=0, b=1) # vẽ đường thẳng từ gốc tọa độ (a = 0) với độ dốc 45 độ (b = 1)
# tính giá trị AUC (Area Under the Curve) của mô hình dựa trên dữ liệu Train, sau đó thêm nó vào đồ thị ROC curve.
auc_train <- round(as.numeric(performance(ROCRpred, "auc")@y.values),2)
legend(.8, .2, auc_train, title = "AUC", cex=1)
# Đưa ra dự đoán trên tập kiểm tra
PredictTest <- predict(model, type = "response", newdata = test_data) # sử dụng mô hình model để dự đoán kết quả trên tập dữ liệu kiểm tra (test).
# Chuyển đổi xác suất thành giá trị
## Dựa vào đường cong ROC ở trên, chọn ngưỡng t = 0,5
test_tab <- table(test_data$Status, PredictTest > 0.5)
test_tab
accuracy_test <- round(sum(diag(test_tab))/sum(test_tab),2)
sprintf("Accuracy on test set is %s", accuracy_test)
ROCRPredTest = prediction(PredictTest, test_data$Status)
auc = round(as.numeric(performance(ROCRPredTest, "auc")@y.values),2)
auc
# Tạo tập dữ liệu huấn luyện và tập dữ liệu kiểm tra
create_train_test <- function(data, size = 0.8, train = TRUE) {
n_row <- nrow(data)
total_row <- size * n_row
train_sample <- sample(1:n_row, size = total_row, replace = FALSE)
if (train == TRUE) {
return(data[train_sample, ])
} else {
return(data[-train_sample, ])
}
}
#lấy các thuộc tính cần thiết
selected_data <- data[, c("Age", "Estrogen.Status", "X6th.Stage","Survival.Months","Status")]
#Sử dụng hàm để tạo các tập train và test
data_train <- create_train_test(selected_data, 0.8, train = TRUE)
data_test <- create_train_test(selected_data, 0.8, train = FALSE)
datatable(data_train,filter = 'top', options = list(pageLength = 5, autoWidth = TRUE))
datatable(data_test,filter = 'top', options = list(pageLength = 5, autoWidth = TRUE))
#Xây dựng mô hình cây quyết định với "Status" là biến target variable
model <- rpart(Status~ ., data = data_train, method = "class")
#Vẽ cây quyết định
rpart.plot(model,extra = 106)
#Tiến hành dự đoạn trên tập test
predictions <- predict(model, data_test, type ="class")
#Tạo 1 bảng confusion
table_mat <- table(data_test$Status, predictions)
table_mat
#Tính độ chính xác
accuracy <- sum(data_test$Status == predictions) / nrow(data_test)
print(paste("Accuracy:", accuracy))
data <- read.csv("./Data/2_ Breast_Cancer.csv")
datatable(data,filter = 'top', options = list(pageLength = 5, autoWidth = TRUE))
summary(data)
datatable(summary(data), options = list(pageLength = 5, autoWidth = TRUE))
data_copy<-data
if(length(data_copy[is.na(data_copy)])==0){
print("Không tồn tại giá trị na")
}else{
print("Tồn tại gái trị na")
}
data_copy<-data_copy[,-c(1)]
datatable(data_copy,filter = 'top', options = list(pageLength = 5, autoWidth = TRUE))
query <- paste("update data_copy set diagnosis=1 where diagnosis='M'")
data_copy <- sqldf(c(query, "select * from data_copy"))
query <- paste("update data_copy set diagnosis=0 where diagnosis='B'")
data_copy <- sqldf(c(query, "select * from data_copy"))
data_copy["diagnosis"]<-list(as.numeric(unlist(data_copy["diagnosis"])))
datatable(data_copy,filter = 'top', options = list(pageLength = 5, autoWidth = TRUE))
M_B_tg<-data.frame(c(sqldf("select `diagnosis`,count(*) as sl from data group by `diagnosis`")))
ggplot(data=M_B_tg, aes(x=diagnosis, y=sl)) + geom_bar(stat="identity",color="steelblue",fill="steelblue")+ ggtitle("M_B")
ggplot(data_copy,aes(x=radius_mean))+geom_histogram(color="black",fill="red")
ggplot(data_copy,aes(x=radius_se))+geom_histogram(color="black",fill="red")
ggplot(data_copy,aes(x=radius_worst))+geom_histogram(color="black",fill="red")
ggplot(data_copy,aes(x=compactness_mean, y=concavity_mean,size=fractal_dimension_mean,color=fractal_dimension_mean))+ geom_point(alpha=0.5) + labs(title = "Bubble Chart")
corr <- round(cor(data_copy), 1)
ggcorrplot(corr,outline.color = "black")
set.seed(123)
samp <- sample(nrow(data_copy), 0.7 * nrow(data_copy))
train <- data_copy[samp, ]
test <- data_copy[-samp, ]
# Check Something
ames_dt1 <- randomForest(diagnosis ~ `radius_mean`+`perimeter_mean`+`area_mean`+`concavity_mean`+`concave.points_mean`+ `fractal_dimension_se`+`texture_worst`+`perimeter_worst`+ `concavity_worst`,data = train,ntree = 800
)
ames_dt1
plot(ames_dt1)
y_pred <- predict(ames_dt1, newdata = test)
head(y_pred)
plot(y_pred,col = "blue")
abline(h = 0.5, col = "darkgreen")
y_pred<-round(y_pred)
head(y_pred)
plot(y_pred,col = "blue")
abline(h = 0.5, col = "darkgreen")
table(test$diagnosis,y_pred)
sensitivity(factor(test$diagnosis),factor(y_pred))
specificity(factor(test$diagnosis),factor(y_pred))
sum(test$diagnosis - y_pred)/length(test)
sum(abs(test$diagnosis - y_pred))/length(test)
knitr::include_graphics("./Image/Random Forest.jpg")
knitr::include_graphics("./Image/Entropy.PNG")
png(file="./Image/saving_plot2.png",
width=4000, height=900)
reprtree:::plot.getTree(ames_dt1)
dev.off()
